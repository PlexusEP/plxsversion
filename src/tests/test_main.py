import subprocess
import sys
import os
from tests.utils import GitDir, TempFile
from version_builder import main
from version_builder.getter import VersionInfo


# These tests ensure the public functions in main create the desired results
# More stringent validation is done in other tests
class TestPublicInterface:
    def test_get_version_from_git(self):
        tag = "v1.2.3-test"
        with GitDir() as git:
            commit_id = git.create_git_commit()
            git.create_git_tag(tag)
            expected = VersionInfo(tag, 0, commit_id, True, False)
            result = main.get_version("git", git.path)
            assert expected == result

    def test_create_file_from_git_expect_file_with_content(self):
        with GitDir() as git, TempFile(".hpp") as out_file:
            git.create_git_commit()
            main.create_version_file("git", git.path, out_file, "cpp", False)
            assert os.path.exists(out_file)

    def test_get_version_from_file(self):
        tag = "v1.2.3-test"
        with TempFile() as input_file:
            with open(input_file, "w") as version_file:
                version_file.write(tag)
            expected = VersionInfo(tag, 0, "", True, False)
            result = main.get_version("file", input_file)
            assert expected == result

    def test_create_file_from_file_expect_file_with_content(self):
        with TempFile() as input_file, TempFile(".hpp") as out_file:
            with open(input_file, "w") as version_file:
                version_file.write("v1.2.3-test")
            main.create_version_file("file", input_file, out_file, "cpp", False)
            assert os.path.exists(out_file)


# These tests ensure the correct version file is created with content for a given lang
# Tests for language specific formatting is done elsewhere
class TestLanguages:
    def test_cpp(self):
        with GitDir() as git, TempFile(".hpp") as out_file:
            git.create_git_commit()
            main.create_version_file("git", git.path, out_file, "cpp", False)
            assert os.path.exists(out_file)
            assert os.stat(out_file).st_size != 0


# These tests ensure invoking this as a module with various parameters is successful
class TestMainIntegration:
    def test_output_created_with_content(self):
        with GitDir() as git, TempFile(".hpp") as out_file:
            git.create_git_commit()
            script_dir = os.getcwd() + "/src"
            with open("/dev/null", "w") as devnull:
                subprocess.check_call(
                    [
                        sys.executable,
                        "-m",
                        "version_builder",
                        "--lang",
                        "cpp",
                        "--source",
                        "git",
                        "--input",
                        git.path,
                        out_file,
                    ],
                    stdout=devnull,
                    env={"PYTHONPATH": script_dir},
                )
            assert os.path.exists(out_file)
            assert os.stat(out_file).st_size != 0

    def test_print_created_output(self):
        with GitDir() as git, TempFile(".hpp") as out_file, TempFile() as stdout_file:
            git.create_git_commit()
            script_dir = os.getcwd() + "/src"
            with open(stdout_file, "w") as output:
                subprocess.check_call(
                    [
                        sys.executable,
                        "-m",
                        "version_builder",
                        "--lang",
                        "cpp",
                        "--source",
                        "git",
                        "--input",
                        git.path,
                        "-p",
                        out_file,
                    ],
                    stdout=output,
                    env={"PYTHONPATH": script_dir},
                )
            assert os.stat(stdout_file).st_size != 0
            with open(stdout_file, "r") as file:
                assert "This file is autogenerated" in file.read()
