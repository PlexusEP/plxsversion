import subprocess
import sys
from pathlib import Path

import pytest

from tests.utils import GitDir
from version_builder import main


class TestMain:
    def test_cpp_source_git(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.0.0-alpha.1")
        main.create_version_file(
            source="git",
            source_input=git_dir.path,
            output_file=git_dir.path / "version.hpp",
            lang="cpp",
        )
        assert (git_dir.path / "version.hpp").exists()
        assert Path.stat(git_dir.path / "version.hpp").st_size != 0

    def test_cpp_source_file(self, tmp_path):
        git_dir = GitDir(tmp_path)
        file = git_dir.path / "version.txt"
        file.write_text("1.1.0-beta.2+build.meta")  # More complex SemVer from file
        git_dir.add_all()
        git_dir.commit()
        # The git tag is mostly for git context here, version comes from file
        main.create_version_file(
            source="file",
            source_input=file,
            output_file=git_dir.path / "version.hpp",
            lang="cpp",
        )
        assert (git_dir.path / "version.hpp").exists()
        assert Path.stat(git_dir.path / "version.hpp").st_size != 0

    def test_print_file(self, tmp_path, capsys):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v0.1.0-rc.1")
        optional_config = main.OptionalConfiguration(print_created_file=True)
        main.create_version_file(
            source="git",
            source_input=git_dir.path,
            output_file=git_dir.path / "version.hpp",
            lang="cpp",
            optional_config=optional_config,
        )
        captured = capsys.readouterr()
        assert "This file is autogenerated." in captured.out

    def test_cpp(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.0.0")
        with pytest.raises(ValueError, match="Unexpected file ending for lang"):
            # incorrect version file extension
            main.create_version_file(
                source="git",
                source_input=git_dir.path,
                output_file=git_dir.path / "version.h",
                lang="cpp",
            )

    def test_c(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.0.0")
        with pytest.raises(ValueError, match="Unexpected file ending for lang"):
            # incorrect version file extension
            main.create_version_file(
                source="git",
                source_input=git_dir.path,
                output_file=git_dir.path / "version.hpp",
                lang="c",
            )
        main.create_version_file(
            source="git",
            source_input=git_dir.path,
            output_file=git_dir.path / "version.h",
            lang="c",
        )
        assert (git_dir.path / "version.h").exists()
        assert Path.stat(git_dir.path / "version.h").st_size != 0

    def test_cpp11(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.0.0")
        with pytest.raises(ValueError, match="Unexpected file ending for lang"):
            # incorrect version file extension
            main.create_version_file(
                source="git",
                source_input=git_dir.path,
                output_file=git_dir.path / "version.h",
                lang="cpp11",
            )
        main.create_version_file(
            source="git",
            source_input=git_dir.path,
            output_file=git_dir.path / "version.hpp",
            lang="cpp11",
        )
        assert (git_dir.path / "version.hpp").exists()
        assert Path.stat(git_dir.path / "version.hpp").st_size != 0


class TestModuleInterface:
    def test_module_call(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v2.0.0-final+build.123")
        subprocess.check_call(
            [
                sys.executable,
                "-m",
                "version_builder",
                "--lang",
                "cpp",
                "--source",
                "git",
                "--input",
                git_dir.path,
                git_dir.path / "version.hpp",
                "--print",
                "--time",
            ],
            env={"PYTHONPATH": Path.cwd() / "src"},
        )
        assert Path.exists(git_dir.path / "version.hpp")
        assert Path.stat(git_dir.path / "version.hpp").st_size != 0
