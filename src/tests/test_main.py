import os
import subprocess
import sys

import pytest

from tests.utils import GitDir
from version_builder import main


class TestMain:
    def test_cpp_source_git(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        main.create_version_file("git", git_dir.path, git_dir.path / "version.hpp", "cpp", False)
        assert (git_dir.path / "version.hpp").exists()
        assert os.stat(git_dir.path / "version.hpp").st_size != 0

    def test_cpp_source_file(self, tmp_path):
        git_dir = GitDir(tmp_path)
        file = git_dir.path / "version.txt"
        file.write_text("1.2.3")
        git_dir.add_all()
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        main.create_version_file("file", file, git_dir.path / "version.hpp", "cpp", False)
        assert (git_dir.path / "version.hpp").exists()
        assert os.stat(git_dir.path / "version.hpp").st_size != 0

    def test_print_file(self, tmp_path, capsys):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        main.create_version_file("git", git_dir.path, git_dir.path / "version.hpp", "cpp", True)
        captured = capsys.readouterr()
        assert "This file is autogenerated." in captured.out

    def test_cpp(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        with pytest.raises(ValueError):
            # incorrect version file extension
            main.create_version_file("git", git_dir.path, git_dir.path / "version.h", "cpp", False)

    def test_c(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        with pytest.raises(ValueError):
            # incorrect version file extension
            main.create_version_file("git", git_dir.path, git_dir.path / "version.hpp", "c", False)
        main.create_version_file("git", git_dir.path, git_dir.path / "version.h", "c", False)
        assert (git_dir.path / "version.h").exists()
        assert os.stat(git_dir.path / "version.h").st_size != 0


class TestModuleInterface:
    def test_module_call(self, tmp_path):
        git_dir = GitDir(tmp_path)
        git_dir.commit()
        git_dir.tag("v1.2.3-My_Descriptor_123")
        subprocess.check_call(
            [
                sys.executable,
                "-m",
                "version_builder",
                "--lang",
                "cpp",
                "--source",
                "git",
                "--input",
                git_dir.path,
                git_dir.path / "version.hpp",
                "--print",
            ],
            env={"PYTHONPATH": os.getcwd() + "/src"},
        )
        assert os.path.exists(git_dir.path / "version.hpp")
        assert os.stat(git_dir.path / "version.hpp").st_size != 0
