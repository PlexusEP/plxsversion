from version_builder.formatter import to_c, to_cpp, to_cpp11
from version_builder.version_data import VersionData


class TestCFormatter:
    def test_output(self):
        version_data = VersionData(
            tag="v1.2.3-MyDescriptor1",
            commit_id="abcd1234",
            branch_name="test/branch",
            is_dirty=False,
            commits_since_tag=2,
        )
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

static const char *VERSION = "v1.2.3-MyDescriptor1.revabcd1234+2commits";
static const unsigned int MAJOR = 1;
static const unsigned int MINOR = 2;
static const unsigned int PATCH = 3;
static const char *VERSION_DESCRIPTOR = "MyDescriptor1";
static const char *TAG = "v1.2.3-MyDescriptor1";
static const unsigned int COMMITS_SINCE_TAG = 2;
static const char *COMMIT_ID = "abcd1234";
static const char *BRANCH = "test/branch";
static bool DIRTY_BUILD = false;
static bool DEVELOPMENT_BUILD = true;

#ifdef __cplusplus
} // extern "C"
#endif

#endif // PLXSVERSION_VERSION_H
"""
        assert expected_output == to_c(version_data)


class TestCpp11Formatter:
    def test_output(self):
        version_data = VersionData(
            tag="v1.2.3-MyDescriptor1",
            commit_id="abcd1234",
            branch_name="test/branch",
            is_dirty=True,
            commits_since_tag=2,
        )
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>

namespace plxsversion {

constexpr const char *VERSION { "v1.2.3-MyDescriptor1.revabcd1234+2commits-dirty" };
constexpr unsigned int MAJOR { 1 };
constexpr unsigned int MINOR { 2 };
constexpr unsigned int PATCH { 3 };
constexpr const char *VERSION_DESCRIPTOR { "MyDescriptor1" };
constexpr const char *TAG { "v1.2.3-MyDescriptor1" };
constexpr unsigned int COMMITS_SINCE_TAG { 2 };
constexpr const char *COMMIT_ID { "abcd1234" };
constexpr const char *BRANCH { "test/branch" };
constexpr bool DIRTY_BUILD { true };
constexpr bool DEVELOPMENT_BUILD { true };

} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""
        assert expected_output == to_cpp11(version_data)


class TestCppFormatter:
    def test_output(self):
        version_data = VersionData(
            tag="v1.2.3-MyDescriptor1",
            commit_id="abcd1234",
            branch_name="test/branch",
            is_dirty=True,
            commits_since_tag=2,
        )
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>
#include <string_view>

namespace plxsversion {

inline constexpr std::string_view VERSION { "v1.2.3-MyDescriptor1.revabcd1234+2commits-dirty" };
inline constexpr unsigned int MAJOR { 1 };
inline constexpr unsigned int MINOR { 2 };
inline constexpr unsigned int PATCH { 3 };
inline constexpr std::string_view VERSION_DESCRIPTOR { "MyDescriptor1" };
inline constexpr std::string_view TAG { "v1.2.3-MyDescriptor1" };
inline constexpr unsigned int COMMITS_SINCE_TAG { 2 };
inline constexpr std::string_view COMMIT_ID { "abcd1234" };
inline constexpr std::string_view BRANCH { "test/branch" };
inline constexpr bool DIRTY_BUILD { true };
inline constexpr bool DEVELOPMENT_BUILD { true };

} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""
        assert expected_output == to_cpp(version_data)
