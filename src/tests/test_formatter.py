from version_builder.formatter import to_c, to_cpp
from version_builder.version_data import VersionData


class TestCFormatter:
    def test_output(self):
        version_data = VersionData(
            tag="v1.2.3-MyDescriptor1", commit_id="abcd1234", is_dirty=False, commits_since_tag=2
        )
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

static const char *VERSION = "v1.2.3-MyDescriptor1.revabcd1234+2commits";
static const char *VERSION_COMPONENTS[] = { "1", "2", "3" };
static const char *VERSION_DESCRIPTOR = "MyDescriptor1";
static const char *TAG = "v1.2.3-MyDescriptor1";
static const unsigned int COMMITS_SINCE_TAG = 2;
static const char *COMMIT_ID = "abcd1234";
static bool DIRTY_BUILD = false;
static bool DEVELOPMENT_BUILD = true;

#ifdef __cplusplus
} // extern "C"
#endif

#endif // PLXSVERSION_VERSION_H
"""
        assert expected_output == to_c(version_data)


class TestCppFormatter:
    def test_output(self):
        version_data = VersionData(tag="v1.2.3-MyDescriptor1", commit_id="abcd1234", is_dirty=True, commits_since_tag=2)
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

namespace version {

constexpr const char *VERSION = "v1.2.3-MyDescriptor1.revabcd1234+2commits-dirty";
constexpr const char *VERSION_COMPONENTS[] = { "1", "2", "3" };
constexpr const char *VERSION_DESCRIPTOR = "MyDescriptor1";
constexpr const char *TAG = "v1.2.3-MyDescriptor1";
constexpr const unsigned int COMMITS_SINCE_TAG = 2;
constexpr const char *COMMIT_ID = "abcd1234";
constexpr bool DIRTY_BUILD = true;
constexpr bool DEVELOPMENT_BUILD = true;

} // namespace version

#endif // PLXSVERSION_VERSION_HPP
"""
        assert expected_output == to_cpp(version_data)
