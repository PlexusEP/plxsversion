from version_builder import formatter, version_info


class TestFormatter:
    def test_output_cpp(self):
        expected = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXS_VERSION_VERSION_HPP
#define PLXS_VERSION_VERSION_HPP

namespace version {
  constexpr const char *VERSION_STRING = "1.2.3.dev2+rev230abc-modified";
  constexpr const char *GIT_TAG_NAME = "1.2.3";
  constexpr const unsigned int GIT_COMMITS_SINCE_TAG = 2;
  constexpr const char *GIT_COMMIT_ID = "230abc";
  constexpr bool MODIFIED_SINCE_COMMIT = true;
  constexpr bool IS_DEV_VERSION = true;

  constexpr const char *VERSION_COMPONENTS[] = {"1", "2", "3"};
  constexpr const char *VERSION_TAG = "";

}

#endif
"""
        actual = formatter.to_cpp(version_info.VersionInfo("1.2.3", 2, "230abc", True, True))
        assert expected == actual

    def test_output_cpp_with_human_tag(self):
        expected = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXS_VERSION_VERSION_HPP
#define PLXS_VERSION_VERSION_HPP

namespace version {
  constexpr const char *VERSION_STRING = "1.2.3-MyMilestone.dev2+rev230abc-modified";
  constexpr const char *GIT_TAG_NAME = "1.2.3-MyMilestone";
  constexpr const unsigned int GIT_COMMITS_SINCE_TAG = 2;
  constexpr const char *GIT_COMMIT_ID = "230abc";
  constexpr bool MODIFIED_SINCE_COMMIT = true;
  constexpr bool IS_DEV_VERSION = true;

  constexpr const char *VERSION_COMPONENTS[] = {"1", "2", "3"};
  constexpr const char *VERSION_TAG = "MyMilestone";

}

#endif
"""
        actual = formatter.to_cpp(version_info.VersionInfo("1.2.3-MyMilestone", 2, "230abc", True, True))
        assert expected == actual
