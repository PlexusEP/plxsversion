import re

from version_builder.formatter import to_c, to_cpp, to_cpp11
from version_builder.version_data import VersionData


class _CommonVersionData:
    version_data = VersionData(
        tag="1.2.3-rc.2",
        commit_id="abcd1234",
        branch_name="test-branch",
        is_dirty=False,
        commits_since_tag=3,
    )


class TestBasicOutput(_CommonVersionData):
    def test_cpp_formatter(self):
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>
#include <string_view>

namespace plxsversion {

inline constexpr std::string_view VERSION { "1.2.3-rc.2+dev.3.sha.abcd1234" };
inline constexpr unsigned int MAJOR { 1 };
inline constexpr unsigned int MINOR { 2 };
inline constexpr unsigned int PATCH { 3 };
inline constexpr std::string_view PRE_RELEASE { "rc.2" };
inline constexpr std::string_view TAG { "1.2.3-rc.2" };
inline constexpr unsigned int COMMITS_SINCE_TAG { 3 };
inline constexpr std::string_view COMMIT_ID { "abcd1234" };
inline constexpr std::string_view BRANCH { "test-branch" };
inline constexpr bool DIRTY_BUILD { false };
inline constexpr bool DEVELOPMENT_BUILD { true };
inline constexpr std::string_view BUILD_METADATA { "dev.3.sha.abcd1234" };

} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""
        assert expected_output == to_cpp(_CommonVersionData.version_data)

    def test_cpp11_formatter(self):
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>

namespace plxsversion {

constexpr const char *VERSION { "1.2.3-rc.2+dev.3.sha.abcd1234" };
constexpr unsigned int MAJOR { 1 };
constexpr unsigned int MINOR { 2 };
constexpr unsigned int PATCH { 3 };
constexpr const char *PRE_RELEASE { "rc.2" };
constexpr const char *TAG { "1.2.3-rc.2" };
constexpr unsigned int COMMITS_SINCE_TAG { 3 };
constexpr const char *COMMIT_ID { "abcd1234" };
constexpr const char *BRANCH { "test-branch" };
constexpr bool DIRTY_BUILD { false };
constexpr bool DEVELOPMENT_BUILD { true };
constexpr const char *BUILD_METADATA { "dev.3.sha.abcd1234" };

} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""
        assert expected_output == to_cpp11(_CommonVersionData.version_data)

    def test_c_formatter(self):
        expected_output = """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

static const char *VERSION = "1.2.3-rc.2+dev.3.sha.abcd1234";
static const unsigned int MAJOR = 1;
static const unsigned int MINOR = 2;
static const unsigned int PATCH = 3;
static const char *PRE_RELEASE = "rc.2";
static const char *TAG = "1.2.3-rc.2";
static const unsigned int COMMITS_SINCE_TAG = 3;
static const char *COMMIT_ID = "abcd1234";
static const char *BRANCH = "test-branch";
static bool DIRTY_BUILD = false;
static bool DEVELOPMENT_BUILD = true;
static const char *BUILD_METADATA = "dev.3.sha.abcd1234";

#ifdef __cplusplus
} // extern "C"
#endif

#endif // PLXSVERSION_VERSION_H
"""
        assert expected_output == to_c(_CommonVersionData.version_data)


class TestTimeOutput(_CommonVersionData):
    def test_cpp_formatter(self):
        _CommonVersionData.version_data.set_time()
        expected_pattern = (
            r"inline constexpr std::string_view UTC_TIME \{ \"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}\" \};"
        )
        assert re.search(expected_pattern, to_cpp(_CommonVersionData.version_data))

    def test_cpp11_formatter(self):
        _CommonVersionData.version_data.set_time()
        expected_pattern = r"constexpr const char \*UTC_TIME \{ \"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}\" \};"
        assert re.search(expected_pattern, to_cpp11(_CommonVersionData.version_data))

    def test_c_formatter(self):
        _CommonVersionData.version_data.set_time()
        expected_pattern = r"static const char \*UTC_TIME = \"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}\";"
        assert re.search(expected_pattern, to_c(_CommonVersionData.version_data))
