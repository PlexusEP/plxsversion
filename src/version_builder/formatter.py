def to_cpp(version_data):
    return _CppFormatter().format(version_data)


def to_c(version_data):
    return _CFormatter().format(version_data)


class _Formatter(object):
    def __init__(self):
        pass

    def format(self, version_data):
        return self.main_formatter(version_data, self._interpret_tag(version_data))

    def _interpret_tag(self, version_data):
        tag_interpretation = version_data.interpret_tag_name()
        if tag_interpretation is None:
            return ""
        else:
            formatted_version_components = self.format_version_components(tag_interpretation.version_components)
            return self.format_tag_interpretation(tag_interpretation, formatted_version_components)


# ----------------------------------------
# C/C++ Common
# ----------------------------------------
class _CCppCommon(_Formatter):
    def format_version_components(self, version_components):
        return '{"' + '", "'.join(version_components) + '"}'


# ----------------------------------------
# C++ Formatter
# ----------------------------------------
class _CppFormatter(_CCppCommon):
    def main_formatter(self, version_data, other_variables):
        return """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

namespace version {
  constexpr const char *VERSION_STRING = "%s";
  constexpr const char *GIT_TAG_NAME = "%s";
  constexpr const unsigned int GIT_COMMITS_SINCE_TAG = %d;
  constexpr const char *GIT_COMMIT_ID = "%s";
  constexpr bool MODIFIED_SINCE_COMMIT = %s;
  constexpr bool IS_DEV_VERSION = %s;
%s
}

#endif
""" % (
            version_data.version_string,
            version_data.tag_name,
            version_data.commits_since_tag,
            version_data.commit_id,
            str(version_data.modified_since_commit).lower(),
            str(version_data.is_dev).lower(),
            other_variables,
        )

    def format_tag_interpretation(self, tag_interpretation, version_components):
        return """
  constexpr const char *VERSION_COMPONENTS[] = %s;
  constexpr const char *VERSION_TAG = "%s";
""" % (version_components, tag_interpretation.version_tag)


# ----------------------------------------
# C Formatter
# ----------------------------------------
class _CFormatter(_CCppCommon):
    def main_formatter(self, version_data, other_variables):
        return """
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

static const char *VERSION_STRING = "%s";
static const char *GIT_TAG_NAME = "%s";
static const unsigned int GIT_COMMITS_SINCE_TAG = %d;
static const char *GIT_COMMIT_ID = "%s";
static bool MODIFIED_SINCE_COMMIT = %s;
static bool IS_DEV_VERSION = %s;
%s
#ifdef __cplusplus
} // extern "C"
#endif

#endif
""" % (
            version_data.version_string,
            version_data.tag_name,
            version_data.commits_since_tag,
            version_data.commit_id,
            str(version_data.modified_since_commit).lower(),
            str(version_data.is_dev).lower(),
            other_variables,
        )

    def format_tag_interpretation(self, tag_interpretation, version_components):
        return """
static const char *VERSION_COMPONENTS[] = %s;
static const char *VERSION_TAG = "%s";
""" % (version_components, tag_interpretation.version_tag)
