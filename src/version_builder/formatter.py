def to_cpp(version_data):
    return _CppFormatter().format(version_data)


def to_c(version_data):
    return _CFormatter().format(version_data)


class _Formatter:
    def __init__(self):
        pass

    def format(self, version_data):
        return self.main_formatter(version_data)


# ----------------------------------------
# C/C++ Common
# ----------------------------------------
class _CCppCommon(_Formatter):
    def _format_version_components(self, version_components):
        return '{"' + '", "'.join(version_components) + '"}'


# ----------------------------------------
# C++ Formatter
# ----------------------------------------
class _CppFormatter(_CCppCommon):
    def main_formatter(self, version_data):
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

namespace version {{
  constexpr const char *VERSION = "{version_data.qualified_version:s}";
  constexpr const char *VERSION_COMPONENTS[] = {super()._format_version_components(version_data.components):s};
  constexpr const char *VERSION_DESCRIPTOR = "{version_data.descriptor:s}";
  constexpr const char *TAG = "{version_data.tag_name:s}";
  constexpr const unsigned int COMMITS_SINCE_TAG = {version_data.commits_since_tag:d};
  constexpr const char *COMMIT_ID = "{version_data.commit_id:s}";
  constexpr bool MODIFIED_SINCE_COMMIT = {str(version_data.modified_since_commit).lower():s};
  constexpr bool DEVELOPMENT_BUILD = {str(version_data.is_development_build).lower():s};

}}

#endif
"""


# ----------------------------------------
# C Formatter
# ----------------------------------------
class _CFormatter(_CCppCommon):
    def main_formatter(self, version_data):
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#pragma once
#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>

#ifdef __cplusplus
extern "C" {{
#endif

static const char *VERSION = "{version_data.qualified_version:s}";
static const char *VERSION_COMPONENTS[] = {super()._format_version_components(version_data.components):s};
static const const char *VERSION_DESCRIPTOR = "{version_data.descriptor:s}";
static const char *TAG = "{version_data.tag_name:s}";
static const unsigned int COMMITS_SINCE_TAG = {version_data.commits_since_tag:d};
static const char *COMMIT_ID = "{version_data.commit_id:s}";
static bool MODIFIED_SINCE_COMMIT = {str(version_data.modified_since_commit).lower():s};
static bool bool DEVELOPMENT_BUILD = {str(version_data.is_development_build).lower():s};

#ifdef __cplusplus
}} // extern "C"
#endif

#endif
"""
