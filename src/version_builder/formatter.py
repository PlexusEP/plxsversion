from version_builder.version_data import VersionData


def to_cpp(version_data: VersionData) -> str:
    return _CppFormatter().format(version_data)


def to_cpp11(version_data: VersionData) -> str:
    return _Cpp11Formatter().format(version_data)


def to_c(version_data: VersionData) -> str:
    return _CFormatter().format(version_data)


class _Formatter:
    def __init__(self) -> None:
        pass

    def format(self, version_data: VersionData) -> str:
        return self.main_formatter(version_data)


# ----------------------------------------
# C++ Formatter
# ----------------------------------------
class _CppFormatter(_Formatter):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>
#include <string_view>

namespace plxsversion {{

inline constexpr std::string_view VERSION {{ "{version_data.qualified_version:s}" }};
inline constexpr unsigned int MAJOR {{ {version_data.major:d} }};
inline constexpr unsigned int MINOR {{ {version_data.minor:d} }};
inline constexpr unsigned int PATCH {{ {version_data.patch:d} }};
inline constexpr std::string_view PRE_RELEASE {{ "{version_data.prerelease:s}" }};
inline constexpr std::string_view TAG {{ "{version_data.tag:s}" }};
inline constexpr unsigned int COMMITS_SINCE_TAG {{ {version_data.commits_since_tag:d} }};
inline constexpr std::string_view COMMIT_ID {{ "{version_data.commit_id:s}" }};
inline constexpr std::string_view BRANCH {{ "{version_data.branch_name:s}" }};
inline constexpr bool DIRTY_BUILD {{ {str(version_data.is_dirty).lower():s} }};
inline constexpr bool DEVELOPMENT_BUILD {{ {str(version_data.is_development_build).lower():s} }};
inline constexpr std::string_view BUILD_METADATA {{ "{version_data.full_build_metadata:s}" }};
{self._optional_output(version_data):s}
}} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""

    def _optional_output(self, version_data: VersionData) -> str:
        optional_output = ""
        if version_data.time:
            optional_output += f"""inline constexpr std::string_view UTC_TIME {{ "{version_data.time:s}" }};\n"""
        return optional_output


# ----------------------------------------
# C++11 Formatter
# ----------------------------------------
class _Cpp11Formatter(_Formatter):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <cstdint>

namespace plxsversion {{

constexpr const char *VERSION {{ "{version_data.qualified_version:s}" }};
constexpr unsigned int MAJOR {{ {version_data.major:d} }};
constexpr unsigned int MINOR {{ {version_data.minor:d} }};
constexpr unsigned int PATCH {{ {version_data.patch:d} }};
constexpr const char *PRE_RELEASE {{ "{version_data.prerelease:s}" }};
constexpr const char *TAG {{ "{version_data.tag:s}" }};
constexpr unsigned int COMMITS_SINCE_TAG {{ {version_data.commits_since_tag:d} }};
constexpr const char *COMMIT_ID {{ "{version_data.commit_id:s}" }};
constexpr const char *BRANCH {{ "{version_data.branch_name:s}" }};
constexpr bool DIRTY_BUILD {{ {str(version_data.is_dirty).lower():s} }};
constexpr bool DEVELOPMENT_BUILD {{ {str(version_data.is_development_build).lower():s} }};
constexpr const char *BUILD_METADATA {{ "{version_data.full_build_metadata:s}" }};
{self._optional_output(version_data):s}
}} // namespace plxsversion

#endif // PLXSVERSION_VERSION_HPP
"""

    def _optional_output(self, version_data: VersionData) -> str:
        optional_output = ""
        if version_data.time:
            optional_output += f"""constexpr const char *UTC_TIME {{ "{version_data.time:s}" }};\n"""
        return optional_output


# ----------------------------------------
# C Formatter
# ----------------------------------------
class _CFormatter(_Formatter):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {{
#endif

static const char *VERSION = "{version_data.qualified_version:s}";
static const unsigned int MAJOR = {version_data.major:d};
static const unsigned int MINOR = {version_data.minor:d};
static const unsigned int PATCH = {version_data.patch:d};
static const char *PRE_RELEASE = "{version_data.prerelease:s}";
static const char *TAG = "{version_data.tag:s}";
static const unsigned int COMMITS_SINCE_TAG = {version_data.commits_since_tag:d};
static const char *COMMIT_ID = "{version_data.commit_id:s}";
static const char *BRANCH = "{version_data.branch_name:s}";
static bool DIRTY_BUILD = {str(version_data.is_dirty).lower():s};
static bool DEVELOPMENT_BUILD = {str(version_data.is_development_build).lower():s};
static const char *BUILD_METADATA = "{version_data.full_build_metadata:s}";
{self._optional_output(version_data):s}
#ifdef __cplusplus
}} // extern "C"
#endif

#endif // PLXSVERSION_VERSION_H
"""

    def _optional_output(self, version_data: VersionData) -> str:
        optional_output = ""
        if version_data.time:
            optional_output += f"""static const char *UTC_TIME = "{version_data.time:s}";\n"""
        return optional_output
