from version_builder.version_data import VersionData


def to_cpp(version_data: VersionData) -> str:
    return _CppFormatter().format(version_data)


def to_cpp11(version_data: VersionData) -> str:
    return _Cpp11Formatter().format(version_data)


def to_c(version_data: VersionData) -> str:
    return _CFormatter().format(version_data)


class _Formatter:
    def __init__(self) -> None:
        pass

    def format(self, version_data: VersionData) -> str:
        return self.main_formatter(version_data)


# ----------------------------------------
# C/C++ Common
# ----------------------------------------
class _CCppCommon(_Formatter):
    def _format_version_components(self, version_components: list[int]) -> str:
        string_components = map(str, version_components)
        return "{ " + ", ".join(string_components) + " }"


# ----------------------------------------
# C++ Formatter
# ----------------------------------------
class _CppFormatter(_CCppCommon):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <array>
#include <cstdint>
#include <string_view>

namespace version {{

constexpr std::string_view VERSION {{ "{version_data.qualified_version:s}" }};
constexpr std::array<unsigned int,3> VERSION_COMPONENTS {super()._format_version_components(version_data.components):s};
constexpr std::string_view VERSION_DESCRIPTOR {{ "{version_data.descriptor:s}" }};
constexpr std::string_view TAG {{ "{version_data.tag:s}" }};
constexpr unsigned int COMMITS_SINCE_TAG {{ {version_data.commits_since_tag:d} }};
constexpr std::string_view COMMIT_ID {{ "{version_data.commit_id:s}" }};
constexpr bool DIRTY_BUILD {{ {str(version_data.is_dirty).lower():s} }};
constexpr bool DEVELOPMENT_BUILD {{ {str(version_data.is_development_build).lower():s} }};

}} // namespace version

#endif // PLXSVERSION_VERSION_HPP
"""


# ----------------------------------------
# C++11 Formatter
# ----------------------------------------
class _Cpp11Formatter(_CCppCommon):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_HPP
#define PLXSVERSION_VERSION_HPP

#include <array>
#include <cstdint>

namespace version {{

constexpr char *VERSION {{ "{version_data.qualified_version:s}" }};
constexpr std::array<unsigned int,3> VERSION_COMPONENTS {super()._format_version_components(version_data.components):s};
constexpr char *VERSION_DESCRIPTOR {{ "{version_data.descriptor:s}" }};
constexpr char *TAG {{ "{version_data.tag:s}" }};
constexpr unsigned int COMMITS_SINCE_TAG {{ {version_data.commits_since_tag:d} }};
constexpr char *COMMIT_ID {{ "{version_data.commit_id:s}" }};
constexpr bool DIRTY_BUILD {{ {str(version_data.is_dirty).lower():s} }};
constexpr bool DEVELOPMENT_BUILD {{ {str(version_data.is_development_build).lower():s} }};

}} // namespace version

#endif // PLXSVERSION_VERSION_HPP
"""


# ----------------------------------------
# C Formatter
# ----------------------------------------
class _CFormatter(_CCppCommon):
    def main_formatter(self, version_data: VersionData) -> str:
        return f"""
// ---------------------------------------------------
// This file is autogenerated.
// DO NOT MODIFY!
// ---------------------------------------------------

#ifndef PLXSVERSION_VERSION_H
#define PLXSVERSION_VERSION_H

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {{
#endif

static const char *VERSION = "{version_data.qualified_version:s}";
static const uint32_t *VERSION_COMPONENTS[] = {super()._format_version_components(version_data.components):s};
static const char *VERSION_DESCRIPTOR = "{version_data.descriptor:s}";
static const char *TAG = "{version_data.tag:s}";
static const unsigned int COMMITS_SINCE_TAG = {version_data.commits_since_tag:d};
static const char *COMMIT_ID = "{version_data.commit_id:s}";
static bool DIRTY_BUILD = {str(version_data.is_dirty).lower():s};
static bool DEVELOPMENT_BUILD = {str(version_data.is_development_build).lower():s};

#ifdef __cplusplus
}} // extern "C"
#endif

#endif // PLXSVERSION_VERSION_H
"""
